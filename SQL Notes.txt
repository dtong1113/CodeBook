SQL Guide:
CREATE TABLE groceries (id INTEGER PRIMARY KEY, name TEXT, quantity INTEGER, aisle INTEGER);
CREATE TABLE exercise logs (id INTEGER PRIMARY KEY AUTO_INCREMENT, type TEXT, minutes INTEGER, calories INTEGER, heart_rate INTEGER);
CREATE TABLE drs_favorites (id INTEGER PRIMARY KEY, type TEXT, reason TEXT);

//INSERTING
INSERT INTO groceries VALUES(1, "Bananas", 4, 7);
INSERT INTO exercise_logs(type, minutes, calories, heart_rate) VALUES ("biking", 30, 100, 110);	//you can specify the columns you want to add to

//QUERYING
SELECT * FROM groceries ORDER BY aisle;
SELECT * FROM groceries WHERE aisle > 5 ORDER BY aisle;
SELECT SUM(quantity) FROM groceries;	//returns total of quantity in table
SELECT MAX(quantity) FROM groceries;	//returns MAX in table
SELECT SUM(quantity) FROM groceries GROUP BY aisle; //returns SUM(quantity) by aisle
SELECT aisle, SUM(quantity) FROM groceries GROUP BY aisle;	//SQL first groups by aisle, then sums it, then select first aisle values from each group
SELECT name, SUM(quantity) FROM groceries GROUP BY aisle;	//misleading since the name will just be the first name in each group

SELECT * FROM exercise_logs WHERE calories > 50 ORDER by calories;	//returns rows with calories> 50 ordered by calories
SELECT * FROM exercise_logs WHERE calories > 50 AND minutes < 30 ORDER by calories;	//returns rows with calories > 50 and minutes < 30
SELECT * FROM exercise_logs WHERE calories > 50 OR heart_rate > 100;	//can use OR as well, AND has precendence (use parenthesis)
SELECT * FROM exercise_logs WHERE type = "biking" OR type = "hiking" OR type = "tree climbing" or type= "ROWING"; //shows rows with these results
SELECT * FROM exercise_logs WHERE type IN ("biking", "hiking", "tree climbing", "rowing");	//like a switch statement
SELECT * FROM exercise_logs WHERE type NOT IN ("biking", "hiking", "tree climbing", "rowing");	//takes the inverse of the above query

SELECT * FROM exercise_logs WHERE type IN (SELECT type FROM drs_favorites);	//nested queries (sub-queries)
SELECT * FROM exercise_logs WHERE type IN (SELECT type FROM drs_favorites) WHERE reason = "Increases cardiovascular health.";	//EXACT match
SELECT * FROm exercise_logs WHERE type IN (SELECT type FROM drs_favourites WHERE reason LIKE "%cardiovascular%"); //searches for "cardiovascular" )

SELECT type, SUM(calories) AS total_calories FROM exercise_logs GROUP BY type; //includes "type" column along with SUM(calories) renamed as total_calories;
SELECT type, SUM(calories) AS total_calories FROM exercise_logs WHERE calories > 150 GROUP BY type; //DOESN'T GIVE WHAT YOU EXPECT! Only includes rows with >150
SELECT type, AVG(calories) AS avg_calories FROM exercise_logs GROUP BY type HAVING avg_calories > 70; //HAVING applies conditions to grouped values instead of individual values
SELECT type FROM exercise_logs GROUP BY type HAVING COUNT(*) >=2; // count checks number of rows with each type

SELECT DISTINCT column FROM table; //only picks distinct columns
SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0; // example of above

SELECT COUNT(*) FROM exercise_logs WHERE heart_rate > 220 - 30; //counting

/* CASE STATEMENT*/ 
SELECT type, heart_rate, //creates a new column temporarily in table based on query
	CASE
		WHEN heart_rate > 220-30 THEN "above max"
		WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"
		WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"
		ELSE "below target"
	END as "hr_zone"
FROM exercise_logs;

SELECT COUNT(*),	//counts the number of exercises in each "zone"
	CASE
		WHEN heart_rate > 220-30 THEN "above max"
		WHEN heart_rate > ROUND(0.90 * (220-30)) THEN "above target"
		WHEN heart_rate > ROUND(0.50 * (220-30)) THEN "within target"
		ELSE "below target"
	END as "hr_zone"
FROM exercise_logs GROUP BY hr_zone; 
// JOINING TABLES
// cross join
SELECT * FROM student_grades, students;	//will match every row with every other row (useless)
//implicent inner join
SELECT * FROM student_grades, students WHERE student_grades.student_id = students.id;	//joins rows which fulfill that property
//explicent inner join -JOIN KEYWORD
SELECT first_name, last_name, email, test, grade FROM students	//same thing as above but better practices
	JOIN student_grades
	ON students.id = student_grades.studet_id;
SELECT students.first_name, students.last_name, students.email, student_grades.test, student_grades.grade FROM students	//declare which table in case there are multiple columns with same name
	JOIN student_grades
	ON students.id = student_grades.studet_id;

https://youtu.be/7Vtl2WggqOg?t=1569
select city, length(city) from station order by length(city), city limit 1;
select city, length(city) from station order by length(city) desc, city limit 1;
SORTS?